plugins {
    id 'eclipse'
    id 'idea'
    id 'java-library'
    id 'net.neoforged.moddev' version '1.0.0'
}

group = 'com.lovetropics.extras'
base {
    archivesName = 'LTExtras'
}

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'

if (System.getenv('GHA_RELEASE_WORKFLOW')) {
    version = "${mod_version}"
} else if (System.getenv('GITHUB_RUN_NUMBER')) {
    project.buildnumber = System.getenv('GITHUB_RUN_NUMBER')
    version = "${mod_version}-${release_type}+${buildnumber}-gha"
} else {
    project.buildnumber = System.getenv('BUILD_NUMBER') ?: 'custom'
    version = "${mod_version}-${release_type}+${buildnumber}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    runs {
        client {
            client()
            programArguments.addAll '--username', 'Dev###'
        }

        server {
            server()
            programArgument '--nogui'
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            logLevel = org.slf4j.event.Level.INFO
        }
    }

    mods {
        "${project.mod_id}" {
            sourceSet sourceSets.main
            sourceSet sourceSets.test
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven { url = "https://maven.ithundxr.dev/snapshots/" }
    maven { url = "https://maven.tterrag.com/" }
    mavenLocal()
}

dependencies {
    jarJar(implementation("com.tterrag.registrate:Registrate:MC1.21-${registrate_version}")) {
        version {
            strictly "[MC1.21-${registrate_version},MC1.22)"
            prefer "MC1.21-${registrate_version}"
        }
    }

    jarJar(implementation("com.lovetropics.lib:LTLib:$ltlib_version"))
    jarJar(implementation("eu.pb4:placeholder-api:$placeholder_api_version"))

//    runtimeOnly fg.deobf('com.jozufozu.flywheel:Flywheel-Forge:1.18-0.7.0.70')
//    runtimeOnly fg.deobf('com.simibubi.create:Create:mc1.18.2_v0.4.1+113')
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version: mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
